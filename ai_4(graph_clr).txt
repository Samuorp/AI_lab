def is_safe(graph, color, v, colored):
    for i in range(len(graph[v])):
        if colored[i] == color and graph[v][i] == 1:
            return False
    return True

def backtrack(graph, m, colored, v, assignment):
    if v == len(graph):
        return True

    for c in range(1, m + 1):
        if is_safe(graph, c, v, colored):
            colored[v] = c
            assignment.append(c)

            if backtrack(graph, m, colored, v + 1, assignment):
                return True

            colored[v] = 0
            assignment.pop()

    return False

def minimum_color(graph):
    num_vertices = len(graph)
    min_colors = float('inf')
    colored = [0] * num_vertices
    assignment = []
    upper_bound = num_vertices

    while upper_bound > 0:
        if backtrack(graph, upper_bound, colored, 0, assignment):
            min_colors = upper_bound
            break
        else:
            upper_bound -= 1

    return min_colors, colored

graph = [
    [0, 1, 1, 1],
    [1, 0, 1, 0],
    [1, 1, 0, 1],
    [1, 0, 1, 0],
]

min_colors, colored = minimum_color(graph)

print("Minimum colors needed:", min_colors)
print("Coloring of vertices:", colored)
